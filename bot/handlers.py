import asyncio
import re

import aiogram.utils.exceptions
from aiogram.dispatcher import FSMContext
from aiogram.types import CallbackQuery, InputMediaPhoto, Message, ParseMode
from aiogram.utils.exceptions import MessageToDeleteNotFound
from bot_logger_config import logger
from config import ENCRYPTION_KEY, bot, dp
from crypto.crypto_utils import PasswordCipher
from keyboards import (
    cancel_creating_kb,
    check_filter_info_kb,
    check_info_kb,
    continue_kb,
    create_and_show_email_box_kb,
    general_main_menu_kb,
    main_menu_kb,
    register_kb,
)
from messages import INSTRUCTION_MESSAGE
from middleware import rate_limit
from photo_urls import (
    CHECK_INFO_PHOTO,
    ENTER_EMAIL_DATA_PHOTO,
    FAIL_LISTENING,
    INSTRUCTION_PHOTO,
    MAIL_PHOTO,
    MAIL_REGISTRATION_PHOTO,
    MY_BOXES_PHOTO,
    SUCCES_LISTENING,
)
from service import BackendConnector
from states.user_states import BotStates, RegistrationBox
from utils import (
    EMAIL_REGEX,
    create_box_info_keyboard,
    create_email_boxes_keyboard,
    create_service_keyboard,
    format_box_info,
    get_available_services,
)


@dp.message_handler(commands=['start'], state='*')
async def send_welcome(message: Message, backend_service: BackendConnector):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–º–∞–Ω–¥–∞. –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º."""
    telegram_id = message.from_user.id

    response = await backend_service.get_data(f'users/{telegram_id}')

    if response.status_code == 200:
        await bot.send_photo(chat_id=telegram_id,
                             photo=MAIL_PHOTO,
                             caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ—á—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ <b>"–ü–æ—á—Ç–∞–ª—å–æ–Ω –ü–µ—á–∫–∏–Ω</b> üìÆ"!',
                             reply_markup=create_and_show_email_box_kb,
                             parse_mode=ParseMode.HTML)
        await BotStates.MainMenuState.set()
    else:
        message_text = ("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–æ—á—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ <b>\"–ü–æ—á—Ç–∞–ª—å–æ–Ω –ü–µ—á–∫–∏–Ω\" üìÆ</b>!\n\n"
                        '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –Ω–µ–≥–æ. '
                        '–ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞ –æ—Ç –≤–∞—à–µ–≥–æ —è—â–∏–∫–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏. '
                        '–¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, –≤—ã —Å–º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –æ—Ü–µ–Ω–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Ä–µ—à–∏—Ç—å, —Å—Ç–æ–∏—Ç –ª–∏ –µ–≥–æ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å.\n\n'
                        '<i>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.</i>')
        await bot.send_photo(chat_id=telegram_id,
                             photo=MAIL_PHOTO,
                             caption=message_text,
                             reply_markup=register_kb,
                             parse_mode=ParseMode.HTML)
        await BotStates.UserCreateState.set()


@dp.callback_query_handler(lambda c: c.data == 'return_in_menu', state='*')
async def main_menu_callback_command(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""

    media = InputMediaPhoto(media=MAIL_REGISTRATION_PHOTO,
                            caption='–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ—á—Ç–æ–≤–æ–≥–æ –±–æ—Ç–∞ <b>"–ü–æ—á—Ç–∞–ª—å–æ–Ω –ü–µ—á–∫–∏–Ω</b> üìÆ"!',
                            parse_mode=ParseMode.HTML)
    await callback.message.edit_media(media=media, reply_markup=create_and_show_email_box_kb)
    await state.reset_state()
    await BotStates.MainMenuState.set()


@dp.callback_query_handler(lambda c: c.data == 'instruction', state=BotStates.MainMenuState)
async def instruction_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∏—Å–Ω—Ç—Ä—É–∫—Ü–∏—è."""
    media = InputMediaPhoto(media=INSTRUCTION_PHOTO, caption=INSTRUCTION_MESSAGE, parse_mode=ParseMode.HTML)
    await callback.message.edit_media(media=media, reply_markup=main_menu_kb)


@dp.callback_query_handler(lambda c: c.data == 'hide_notification_message', state='*')
async def hide_message_handler(callback: CallbackQuery):
    try:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    except MessageToDeleteNotFound:
        pass


@dp.callback_query_handler(lambda c: c.data == 'register', state=BotStates.UserCreateState)
async def register_user(callback: CallbackQuery, backend_service: BackendConnector):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è."""
    telegram_id = callback.from_user.id
    data = {
        'telegram_id': telegram_id,
    }
    response = await backend_service.post_data('users', data=data)
    if response.status_code == 201:
        message_text = ('üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</b> üéâ\n\n–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –≤ –Ω–∞—à–µ–º –±–æ—Ç–µ.\n'
                        '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ø–æ—á—Ç–æ–≤—ã–µ —è—â–∏–∫–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏ –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä—è–º–æ –∑–¥–µ—Å—å.\n'
                        '–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∞—à–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –µ–≥–æ –ø–æ –≤–∞—à–µ–º—É —É—Å–º–æ—Ç—Ä–µ–Ω–∏—é.\n'
                        '–ë—É–¥–µ–º —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫—É—Ä—Å–µ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø–∏—Å–µ–º!')
        await callback.message.edit_caption(caption=message_text,
                                            parse_mode=ParseMode.HTML,
                                            reply_markup=create_and_show_email_box_kb)
        await BotStates.MainMenuState.set()
    else:
        message_text = ('üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞!\n'
                        '–í–æ–∑–º–æ–∂–Ω–æ —Å–µ—Ä–≤–∏—Å —Å–µ–π—á–∞—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω\n'
                        '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–µ–º–Ω–æ–≥–æ –ø–æ–∑–∂–µ!')
        await callback.message.edit_caption(caption=message_text,
                                            parse_mode=ParseMode.HTML,
                                            reply_markup=register_kb)
        await BotStates.UserCreateState.set()


@dp.callback_query_handler(lambda c: c.data == 'create_new_emailbox', state=BotStates.MainMenuState)
async def create_new_email_box(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞."""
    message_text = ('–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\n\n'
                    '1. –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>username@example.com</b>\n'
                    '2. –ü–∞—Ä–æ–ª—å –æ—Ç –≤–∞—à–µ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞.\n'
                    '3. –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–∏—Å–µ–º:\n'
                    '   - –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞\n'
                    '   - –ó–Ω–∞—á–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞\n\n'
                    '–≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –ø–æ–ª—É—á–∞—Ç—å –ø–∏—Å—å–º–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —è—â–∏–∫–∞ –ø—Ä—è–º–æ –≤ —ç—Ç–æ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–µ.')
    media = InputMediaPhoto(media=MAIL_REGISTRATION_PHOTO,
                            caption=message_text,
                            parse_mode=ParseMode.HTML)
    await callback.message.edit_media(media=media, reply_markup=continue_kb)
    await BotStates.EmailBoxCreateState.set()


@dp.callback_query_handler(lambda c: c.data == 'continue_create_mail', state=BotStates.EmailBoxCreateState)
async def continue_create_mail_handler(callback: CallbackQuery, backend_service: BackendConnector):
    services = await get_available_services(backend_service)
    keyboard = create_service_keyboard(services)

    message_text = '<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à –ø–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å ‚§µÔ∏è: </b>'
    media = InputMediaPhoto(media=ENTER_EMAIL_DATA_PHOTO, caption=message_text, parse_mode=ParseMode.HTML)
    await callback.message.edit_media(media=media, reply_markup=keyboard)


@dp.callback_query_handler(lambda c: c.data.startswith('select_domain_'), state=BotStates.EmailBoxCreateState)
async def select_email_domain_handler(callback: CallbackQuery, state: FSMContext, backend_service: BackendConnector):
    selected_slug = callback.data.replace('select_domain_', '')

    services = await get_available_services(backend_service)
    selected_service = next((service for service in services if service['slug'] == selected_slug), None)

    if selected_service:
        await state.update_data(slug=selected_service['slug'], slug_title=selected_service['title'])
        parent_message = await callback.message.edit_caption(
            caption='–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ <b>–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ª–æ–≥–∏–Ω)</b> –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–æ—á—Ç–æ–≤–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ ‚§µÔ∏è:',
            parse_mode=ParseMode.HTML,
            reply_markup=cancel_creating_kb)
        await state.update_data(parent_message=parent_message.message_id)
        await RegistrationBox.WaitForUserNameState.set()


@dp.message_handler(state=RegistrationBox.WaitForUserNameState)
async def process_username(message: Message, state: FSMContext):
    if re.match(EMAIL_REGEX, message.text):

        username = message.text.strip()
        await state.update_data(username=username)
        message_id = (await state.get_data()).get('parent_message')

        await bot.edit_message_caption(
            chat_id=message.from_user.id,
            message_id=message_id,
            caption=f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n'
                    f'–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à <b>–ø–∞—Ä–æ–ª—å</b> –¥–ª—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞ ‚§µÔ∏è:',
            parse_mode=ParseMode.HTML,
            reply_markup=cancel_creating_kb)
        await message.delete()
        await RegistrationBox.WaitForPasswordState.set()
    else:
        fail_message = await message.answer(
            '–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ username@example.com.')
        await asyncio.sleep(5)
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=fail_message.message_id)


@dp.message_handler(state=RegistrationBox.WaitForPasswordState)
async def process_password(message: Message, state: FSMContext):
    password = message.text.strip()

    await state.update_data(password=password)
    message_id = (await state.get_data()).get('parent_message')
    username = (await state.get_data()).get('username')
    await bot.edit_message_caption(
        chat_id=message.from_user.id,
        message_id=message_id,
        caption=f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n'
                f'–ü–∞—Ä–æ–ª—å: {password}\n\n'
                '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ö–æ—Ç—è–±—ã –æ–¥–∏–Ω <b>—Ñ–∏–ª—å—Ç—Ä</b>,\n<b>–≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ</b> ‚§µÔ∏è:',
        parse_mode=ParseMode.HTML,
        reply_markup=cancel_creating_kb)
    await message.delete()
    await RegistrationBox.WaitForFilterNameState.set()


@dp.message_handler(state=RegistrationBox.WaitForFilterNameState)
async def process_filter_name(message: Message, state: FSMContext):
    filter_name = message.text.strip()

    await state.update_data(filter_name=filter_name)
    message_id = (await state.get_data()).get('parent_message')
    username = (await state.get_data()).get('username')
    password = (await state.get_data()).get('password')

    await bot.edit_message_caption(
        chat_id=message.from_user.id,
        message_id=message_id,
        caption=f'–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}\n'
                f'–ü–∞—Ä–æ–ª—å: {password}\n'
                f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: {filter_name}\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ <b>email –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞</b>, –ø–∏—Å—å–º–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å, \n–≤ —Ñ–æ—Ä–º–∞—Ç–µ username@example.com. ‚§µÔ∏è:',
        parse_mode=ParseMode.HTML,
        reply_markup=cancel_creating_kb)
    await message.delete()
    await RegistrationBox.WaitForFilterValueState.set()


@dp.message_handler(state=RegistrationBox.WaitForFilterValueState)
async def process_filter_value(message: Message, state: FSMContext):
    if re.match(EMAIL_REGEX, message.text):
        filter_value = message.text.strip()
        await state.update_data(filter_value=filter_value)
        user_data = await state.get_data()

        info_text = f"""
        <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:</b>

üåê –ü–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å: {user_data['slug_title']}
üìß –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_data['username']}
üîí –ü–∞—Ä–æ–ª—å: {'*' * len(user_data['password'])} (—Å–∫—Ä—ã—Ç)
üîç –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: {user_data['filter_name']}
üì© Email –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: {user_data['filter_value']}
"""

        message_id = (await state.get_data()).get('parent_message')

        media = InputMediaPhoto(media=CHECK_INFO_PHOTO, caption=info_text, parse_mode=ParseMode.HTML)
        await bot.edit_message_media(chat_id=message.from_user.id,
                                     message_id=message_id,
                                     media=media,
                                     reply_markup=check_info_kb)
        await message.delete()
        await RegistrationBox.CheckEmailInfoState.set()
    else:
        fail_message = await message.answer(
            '–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ username@example.com.')
        await asyncio.sleep(5)
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=fail_message.message_id)


@dp.callback_query_handler(lambda c: c.data == 'yes_create_email', state=RegistrationBox.CheckEmailInfoState)
async def confirm_email_create_handler(callback: CallbackQuery, state: FSMContext, backend_service: BackendConnector):
    user_data = await state.get_data()

    cipher = PasswordCipher(ENCRYPTION_KEY)

    encrypted_password = cipher.encrypt_password(user_data['password'])

    data = {
        'user_id': callback.from_user.id,
        'email_service_slug': user_data['slug'],
        'email_username': user_data['username'],
        'email_password': encrypted_password.decode(),
        'filters': [
            {
                'filter_value': user_data['filter_value'],
                'filter_name': user_data['filter_name']
            }
        ]
    }

    response = await backend_service.post_data('emailboxes', data=data)
    if response.status_code == 201:
        message_text = (
            '<b>üéâ –ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–æ—á—Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ! üéâ</b>\n\n'
            '–¢–µ–ø–µ—Ä—å, –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞ –æ—Ç —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø–∏—Å—å–º–∞.\n'
            '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!'
        )
        media = InputMediaPhoto(media=SUCCES_LISTENING,
                                caption=message_text,
                                parse_mode=ParseMode.HTML)
        await callback.message.edit_media(media=media, reply_markup=general_main_menu_kb)
    elif response.status_code == 400:
        error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        media = InputMediaPhoto(media=FAIL_LISTENING, caption=f'‚ùå –û—à–∏–±–∫–∞: {error_detail}',
                                parse_mode=ParseMode.HTML)
        await callback.message.edit_media(media=media, reply_markup=main_menu_kb)


@dp.callback_query_handler(lambda c: c.data == 'show_my_emailboxes', state=BotStates.MainMenuState)
async def show_my_emailboxes(callback: CallbackQuery, backend_service: BackendConnector):
    telegram_id = callback.from_user.id
    response = await backend_service.get_data(f'users/{telegram_id}/boxes')
    email_boxes = response.json()
    keyboard = create_email_boxes_keyboard(email_boxes)
    await callback.message.edit_caption('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫:',
                                        reply_markup=keyboard,
                                        parse_mode=ParseMode.HTML)
    await BotStates.ShowCaseState.set()


@dp.callback_query_handler(lambda c: c.data.startswith('box_info:'), state=BotStates.ShowCaseState)
async def show_box_info(callback: CallbackQuery,
                        backend_service: BackendConnector,
                        state: FSMContext,
                        from_listening=False):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä—Ç–µ–Ω–æ–º –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ."""
    if from_listening:
        box_info = (await state.get_data()).get('box_info')
        email_username = box_info.get('email_username')
    else:
        email_username = callback.data.split(':')[1]
    data = {
        'telegram_id': callback.from_user.id,
        'email_username': email_username,
    }
    response = await backend_service.post_data('emailboxes/info', data=data)

    if response.status_code == 200:
        box_info = response.json()
        message_text = format_box_info(box_info)
        keyboard = create_box_info_keyboard(box_info)
        await state.update_data(box_info=box_info)
    else:
        error_detail = response.json().get('detail', [])
        if error_detail and isinstance(error_detail, list):
            message_text = error_detail[0].get('msg', '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞.')
        else:
            message_text = error_detail
        keyboard = main_menu_kb
    media = InputMediaPhoto(media=MY_BOXES_PHOTO, caption=message_text, parse_mode=ParseMode.HTML)
    try:
        await callback.message.edit_media(media=media, reply_markup=keyboard)
    except aiogram.utils.exceptions.MessageNotModified:
        pass


@dp.callback_query_handler(lambda c: c.data == 'go_back_to_boxes', state=BotStates.ShowCaseState)
async def go_back_to_boxes(callback: CallbackQuery, backend_service: BackendConnector, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –∫ —Å–ø–∏—Å–∫—É –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤."""
    await state.reset_state()
    await show_my_emailboxes(callback, backend_service)


@dp.callback_query_handler(lambda c: c.data == 'add_filter', state=BotStates.ShowCaseState)
async def add_new_filter(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –¥–ª—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞."""
    parent_message = await callback.message.edit_caption(
        caption='–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä, –≤–≤–µ–¥–∏—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ ‚§µÔ∏è:',
        parse_mode=ParseMode.HTML,
        reply_markup=cancel_creating_kb)
    await state.update_data(parent_message=parent_message.message_id)
    await RegistrationBox.WaitForNewFilterNameState.set()


@dp.message_handler(state=RegistrationBox.WaitForNewFilterNameState)
async def process_new_filter_name(message: Message, state: FSMContext):
    filter_name = message.text.strip()
    message_id = (await state.get_data()).get('parent_message')
    await state.update_data(filter_name=filter_name)
    await bot.edit_message_caption(
        chat_id=message.from_user.id,
        message_id=message_id,
        caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: {filter_name}\n\n'
                '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞, –ø–∏—Å—å–º–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å, \n–≤ —Ñ–æ—Ä–º–∞—Ç–µ username@example.com. ‚§µÔ∏è:',
        reply_markup=cancel_creating_kb)
    await message.delete()
    await RegistrationBox.WaitForNewFilterValueState.set()


@dp.message_handler(state=RegistrationBox.WaitForNewFilterValueState)
async def process_new_filter_value(message: Message, state: FSMContext):
    if re.match(EMAIL_REGEX, message.text):
        filter_value = message.text.strip()
        await state.update_data(filter_value=filter_value)
        user_data = await state.get_data()

        info_text = f"""
            <b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –¥–∞–Ω–Ω—ã–µ:</b>
üîç –ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞: {user_data['filter_name']}
üì© Email –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞: {user_data['filter_value']}
    """

        message_id = (await state.get_data()).get('parent_message')

        media = InputMediaPhoto(media=CHECK_INFO_PHOTO, caption=info_text, parse_mode=ParseMode.HTML)
        await bot.edit_message_media(chat_id=message.from_user.id,
                                     message_id=message_id,
                                     media=media,
                                     reply_markup=check_filter_info_kb)
        await message.delete()
        await RegistrationBox.CheckFilterInfoState.set()
    else:
        fail_message = await message.answer(
            '–í–≤–µ–¥–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ email –≤ —Ñ–æ—Ä–º–∞—Ç–µ username@example.com.')
        await asyncio.sleep(5)
        await message.delete()
        await bot.delete_message(chat_id=message.chat.id, message_id=fail_message.message_id)


@dp.callback_query_handler(lambda c: c.data == 'yes_add_new_filter', state=RegistrationBox.CheckFilterInfoState)
async def yes_add_new_filter_handler(callback: CallbackQuery, backend_service: BackendConnector, state: FSMContext):
    user_data = await state.get_data()
    box_info = user_data.get('box_info')
    data = {
        'telegram_id': callback.from_user.id,
        'email_username': box_info['email_username'],
        'filter_data': {
            'filter_value': user_data['filter_value'],
            'filter_name': user_data['filter_name']
        }
    }

    response = await backend_service.post_data('filters/create', data=data)
    if response.status_code == 201:
        message_text = (
            '<b>üéâ –ù–æ–≤—ã–π —Ñ–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ</b>\n\n'
            '–¢–µ–ø–µ—Ä—å, –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –ø–∏—Å—å–º–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—à–µ–º—É —Ñ–∏–ª—å—Ç—Ä—É, –±–æ—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.\n'
            '–û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –Ω–∞ —Å–≤—è–∑–∏ –∏ –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–µ –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–∞–∂–Ω–æ–≥–æ –ø–∏—Å—å–º–∞, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º!'
        )
        media = InputMediaPhoto(media=SUCCES_LISTENING,
                                caption=message_text,
                                parse_mode=ParseMode.HTML)
        await callback.message.edit_media(media=media, reply_markup=general_main_menu_kb)
    elif response.status_code == 400:
        error_detail = response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        media = InputMediaPhoto(media=FAIL_LISTENING, caption=f'‚ùå –û—à–∏–±–∫–∞: {error_detail}',
                                parse_mode=ParseMode.HTML)
        await callback.message.edit_media(media=media, reply_markup=main_menu_kb)


@rate_limit(limit=180, key='listening')
@dp.callback_query_handler(lambda c: c.data == 'start_listening', state=BotStates.ShowCaseState)
async def start_listening_handler(callback: CallbackQuery, backend_service: BackendConnector, state: FSMContext):
    box_info = (await state.get_data()).get('box_info')
    data = {
        'telegram_id': callback.from_user.id,
        'email_username': box_info.get('email_username'),
    }
    response = await backend_service.post_data('emailboxes/start_listening', data=data)
    if response.status_code == 200:
        await show_box_info(callback, backend_service, state, from_listening=True)
    else:
        error_message = response.json().get('detail', 'Error')
        await callback.message.edit_caption(caption=error_message,
                                            parse_mode=ParseMode.HTML,
                                            reply_markup=general_main_menu_kb)
        logger.error(error_message)


@rate_limit(limit=180, key='listening')
@dp.callback_query_handler(lambda c: c.data == 'stop_listening', state=BotStates.ShowCaseState)
async def stop_listening_handler(callback: CallbackQuery, backend_service: BackendConnector,
                                 state: FSMContext):
    box_info = (await state.get_data()).get('box_info')
    data = {
        'telegram_id': callback.from_user.id,
        'email_username': box_info.get('email_username'),
    }
    response = await backend_service.post_data('emailboxes/stop_listening', data=data)
    if response.status_code == 200:
        await show_box_info(callback, backend_service, state, from_listening=True)
    else:
        error_message = response.json().get('detail', 'Error')
        await callback.message.edit_caption(caption=error_message,
                                            parse_mode=ParseMode.HTML,
                                            reply_markup=general_main_menu_kb)
        logger.error(error_message)
