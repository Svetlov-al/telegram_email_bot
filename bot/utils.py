from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from middleware import BackendConnector

EMAIL_REGEX = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'


def format_box_info(data: dict) -> str:
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –µ–≥–æ –≤ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç."""
    if not data:
        return '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.'

    message_text = '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ:</b>\n\n'

    message_text += f"üìß <b>Email:</b> {data['email_username']}\n"
    message_text += f"üîä <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:</b> {'–î–∞' if data['listening'] else '–ù–µ—Ç'}\n"
    message_text += f"üåê <b>–ü–æ—á—Ç–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å:</b> {data['email_service']['title']}\n"

    if not data['filters']:
        message_text += '<i>–§–∏–ª—å—Ç—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</i>\n'
    else:
        message_text += '<b>–§–∏–ª—å—Ç—Ä—ã:</b>\n'
        for filter_ in data['filters']:
            message_text += f"‚Ä¢ <i>{filter_['filter_name']}</i>: {filter_['filter_value']}\n"

    return message_text


async def get_available_services(backend_service: BackendConnector) -> list:
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å –±—ç–∫–µ–Ω–¥–∞."""
    response = await backend_service.get_data(endpoint='emailboxes/services')
    if response.status_code == 200:
        return response.json()
    return []


def create_service_keyboard(services: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏."""
    keyboard = InlineKeyboardMarkup()

    if not services:
        keyboard.add(InlineKeyboardButton(text='üö´ –°–µ—Ä–≤–∏—Å –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω', callback_data='unavailable_service'))
        keyboard.add(InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='return_in_menu'))
        return keyboard

    for service in services:
        button = InlineKeyboardButton(text=service['title'], callback_data=f"select_domain_{service['slug']}")
        keyboard.add(button)
    keyboard.add(InlineKeyboardButton(text='üö´ –û—Ç–º–µ–Ω–∞', callback_data='return_in_menu'))
    return keyboard


def create_email_boxes_keyboard(email_boxes: list) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤.

    :param email_boxes: –°–ø–∏—Å–æ–∫ –ø–æ—á—Ç–æ–≤—ã—Ö —è—â–∏–∫–æ–≤.
    :return: InlineKeyboardMarkup –æ–±—ä–µ–∫—Ç.
    """
    keyboard = InlineKeyboardMarkup(row_width=1)
    for box in email_boxes:
        button = InlineKeyboardButton(text=box['email_username'], callback_data=f"box_info:{box['email_username']}")
        keyboard.add(button)
    main_menu_button = InlineKeyboardButton(text='‚ò∞ –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='return_in_menu')
    keyboard.add(main_menu_button)
    return keyboard


def create_box_info_keyboard(box_info: dict) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ.

    :param box_info: –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ—á—Ç–æ–≤–æ–º —è—â–∏–∫–µ.
    :return: InlineKeyboardMarkup –æ–±—ä–µ–∫—Ç.
    """
    keyboard = InlineKeyboardMarkup(row_width=1)

    add_filter_button = InlineKeyboardButton(text='üì• –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä', callback_data='add_filter')
    keyboard.add(add_filter_button)

    if box_info['listening']:
        stop_listening_button = InlineKeyboardButton(text='üîá –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ', callback_data='stop_listening')
        keyboard.add(stop_listening_button)
    else:
        start_listening_button = InlineKeyboardButton(text='üîà –ù–∞—á–∞—Ç—å –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ', callback_data='start_listening')
        keyboard.add(start_listening_button)

    back_button = InlineKeyboardButton(text='‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data='go_back_to_boxes')
    keyboard.add(back_button)

    return keyboard
